#  Copyright (c) 2022 Robert Bosch Manufacturing Solutions GmbH
#
#  See the AUTHORS file(s) distributed with this work for additional
#  information regarding authorship.
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#   SPDX-License-Identifier: MPL-2.0

name: Neon-Stdio-Holi-T25-frontend CI

on:
  push:
    branches:
      - github-action-workflow
      - master
      - holi-t25-1.1.2
    paths:
     - '.github/workflows/**' 
     - 'frontend/**'  # Listen to changes in frontend files as well
  workflow_dispatch:
    inputs:
      environment:
        description: "Frontend CI environment (staging or production)"
        required: true
        type: choice
        default: github-action-workflow
        options:
          - github-action-workflow
          - master
          - holi-t25-1.1.2

permissions:
  contents: read
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout only the `frontend` folder using sparse-checkout
      - name: Checkout Neon-Studio-Holi-T25/frontend folder
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          
      - name: Enable sparse-checkout
        run: |
          git sparse-checkout init --cone
          git sparse-checkout set frontend

      - name: Verify Sparse Checkout
        run: |
          echo "Checked out directory: $(pwd)"
          echo "List of checked-out files: $(ls -a)"
          tree

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Print Node.js version
        run: |
          echo "Node.js version: $(node --version)"
          echo "Installed Node.js version: $(npm --version)"

      - name: Install globally npm
        run: |
            npm i -g yarn
            echo "Installed globally npm: $(npm --version)"

      # Install missing babel plugin for private properties
      - name: Install additional babel plugin for private properties
        run: |
          yarn add @babel/plugin-proposal-private-property-in-object --dev
          echo "Installed additional babel plugin for private properties"
            
      # Check if CACHE_KEY is already defined
      - name: Check if CACHE_KEY exists and calculate it if necessary
        id: check-cache-key
        run: |
          # Check if CACHE_KEY already exists
          if [[ -z "${{ env.CACHE_KEY }}" ]]; then
            echo "CACHE_KEY is not defined. Calculating new cache key..."
            # Calculate the hash of all files in the frontend directory
            ALL_FILES_HASH=$(find frontend/ -type f -exec sha256sum {} \; | sha256sum | awk '{ print $1 }')
            
            # Generate a unique cache key
            CACHE_KEY="frontend-node-${ALL_FILES_HASH}"
            
            # Make the CACHE_KEY available for later steps using GITHUB_ENV
            echo "CACHE_KEY=$CACHE_KEY" >> $GITHUB_ENV
            echo "New CACHE_KEY generated: $CACHE_KEY"
          else
            echo "CACHE_KEY already exists: ${{ env.CACHE_KEY }}"
          fi

      # Cache the npm/yarn dependencies
      - name: Cache npm and yarn dependencies
        id: cache-npm-yarn
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn-cache
            frontend/neon-studioz/node_modules  # Cache node_modules inside `frontend` folder
          key: ${{ env.CACHE_KEY }}  # Use the CACHE_KEY set earlier
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Show Cache Details Before Restore
        run: |
          echo "Cache key before restore: ${{ env.CACHE_KEY }}"
          echo "Cache key used: ${{ steps.cache-npm-yarn.outputs.cache-hit }}"
          if [ "${{ steps.cache-npm-yarn.outputs.cache-hit }}" == 'true' ]; then
            echo "Cache hit! The following cache paths were restored:"
            echo "- ~/.yarn-cache"
            echo "- ~/frontend/node_modules"
          else
            echo "Cache miss! A new cache will be created with the following paths:"
            echo "- ~/.yarn-cache"
            echo "- ~/frontend/node_modules"
          fi

      - name: Install dependencies in frontend/neon-studioz
        run: |
            yarn install
            echo "Installed globally yarn: $(yarn --version)"
            echo "Installed dependencies in folder: ./Neon-Stdio-Holi-T25/frontend/neon-studioz"
            echo "Installed list of dependencies: $(yarn list --depth 0)"
            yarn list --depth 0
        working-directory: frontend/neon-studioz

      # Ensure cache is updated after installing dependencies
      - name: Update Cache After Installation
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn-cache
            frontend/node_modules    # Cache node_modules inside `frontend` folder
          key: ${{ env.CACHE_KEY }}  # Use the CACHE_KEY set earlier
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Show Cache Details After Save
        run: |
          echo "Cache key after save: ${{ env.CACHE_KEY }}"

      - name: Disable ESLint warnings as errors
        run: echo "CI=false" >> $GITHUB_ENV

      - name: build frontend
        run: |
          echo "Starting build for branch: ${{ github.ref }}"
          yarn build  # Running the build script defined in package.json
          
          # Optional: Display a list of installed dependencies if needed
          echo "Installed dependencies:"
          yarn list --depth 0  # This will list the top-level dependencies
          
           # Optional: Output the build details, you can add custom build logs here
          echo "Build completed for branch: ${{ github.ref }} in mode: $BUILD_MODE"
        working-directory: frontend/neon-studioz


      - name: Set timestamp
        id: set-timestamp
        run: echo "timestamp=$(date '+%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV
